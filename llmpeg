#!/bin/bash

# Check if user input is provided
if [ -z "$*" ]; then
    echo "直接输入你想要做什么，比如："
    echo "\"llmpeg 从 example.mov 中删除声音\""
    exit 1
fi

# Capture command-line arguments
user_input="$*"

# Conditional check for API keys
if [ -n "$OPENAI_API_KEY" ]; then
    # Store the curl response as a variable for OpenAI API
    # 在这里修改 OpenAI 的 Base URL
    response=$(curl -s "https://api.openai.com/v1/chat/completions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d "{
            \"model\": \"gpt-4o-mini\",
            \"messages\": [
                {
                    \"role\": \"system\",
                    \"content\": \"You write ffmpeg commands based on the description from the user. You should only respond with a command line command for ffmpeg, never any additional text. All responses should be a single line without any line breaks.\"
                },
                {
                    \"role\": \"user\",
                    \"content\": \"$user_input\"
                }
            ]
        }")
elif [ -n "$GROQ_API_KEY" ]; then
    # Store the curl response as a variable for GROQ API
    response=$(curl -s "https://api.groq.com/openai/v1/chat/completions" \
        -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${GROQ_API_KEY}" \
        -d "{
            \"model\": \"llama-3.3-70b-versatile\",
            \"messages\": [
                {
                    \"role\": \"system\",
                    \"content\": \"You write ffmpeg commands based on the description from the user. You should only respond with a command line command for ffmpeg, never any additional text. Keep the output folder same as the input folder in the generated command. Propose the output file name based on input file name and the modification applied on it. All responses should be a single line without any line breaks.\n\nFor example, if the user asks \\\"convert a video folderX/input.mp4 from MP4 to WebM?\\\", you should respond with: \\\"ffmpeg -i folderX/input.mp4 -c:v libvpx -c:a libvorbis folderX/output_in_webm.webm\\\"\"
                },
                {
                    \"role\": \"user\",
                    \"content\": \"$user_input\"
                }
            ],
            \"temperature\": 1,
            \"max_tokens\": 1024,
            \"top_p\": 1,
            \"stream\": false,
            \"stop\": null
        }")
else
    echo "没有发现 API key. 请设置 OPENAI_API_KEY 或 GROQ_API_KEY."
    echo "export OPENAI_API_KEY=\"sk-xxxx\""
    exit 1
fi

# Parse the "content" field from the response using grep and sed, ignoring escaped quotes
content=$(echo "$response" | grep -o '"content": *"[^"\\]*\(\\.[^"\\]*\)*"')

# Remove the content prefix
command=$(echo "$content" | sed 's/"content": *"//;s/"$//')

# Remove backslashes from escaped quotes
command=$(echo "$command" | sed 's/\\"/"/g')

# Check if content is empty or null
if [ -z "$content" ]; then
    echo "错误：未生成命令或 API 响应为空。"
    exit 1
fi

# Echo the command
echo "生成命令: $command"

# Prompt the user to run the command
read -p "按回车执行命令，或 Ctrl+C 取消..."

# Run the command with additional options
eval "$(echo "$command" | sed 's/ffmpeg/ffmpeg -v quiet -stats/')"
